<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="alarm">

    <!-- ==================== 큐 관리 ==================== -->

    <!-- 큐 조회 (PENDING 상태) -->
    <select id="selectPendingQueue" parameterType="map" resultType="map">
        SELECT QUEUE_ID            AS queueId,
               MAIL_SOURCE         AS mailSource,
               ALARM_NAME          AS alarmName,
               SEVERITY            AS severity,
               SQL_ID              AS sqlId,
               SECTION_TITLE       AS sectionTitle,
               SECTION_CONTENT     AS sectionContent,
               RECIPIENT_USER_IDS  AS recipientUserIds,
               RECIPIENT_GROUPS    AS recipientGroups,
               STATUS              AS status,
               RETRY_COUNT         AS retryCount,
               ERROR_MESSAGE       AS errorMessage,
               REG_DATE            AS regDate
        FROM MAIL_QUEUE
        WHERE STATUS = 'PENDING'
        ORDER BY REG_DATE ASC<if test="limit != null">
        FETCH FIRST #{limit} ROWS ONLY</if>
    </select>

    <!-- 큐 상태 업데이트: SUCCESS -->
    <update id="updateQueueSuccess" parameterType="map">
        UPDATE MAIL_QUEUE
        SET STATUS = 'SUCCESS',
            UPD_DATE = SYSDATE
        WHERE QUEUE_ID = #{queueId}
    </update>

    <!-- 큐 상태 업데이트: RETRY -->
    <update id="updateQueueRetry" parameterType="map">
        UPDATE MAIL_QUEUE
        SET RETRY_COUNT = RETRY_COUNT + 1,
            ERROR_MESSAGE = #{errorMessage},
            UPD_DATE = SYSDATE
        WHERE QUEUE_ID = #{queueId}
    </update>

    <!-- 큐 상태 업데이트: FAILED -->
    <update id="updateQueueFailed" parameterType="map">
        UPDATE MAIL_QUEUE
        SET STATUS = 'FAILED',
            ERROR_MESSAGE = #{errorMessage},
            UPD_DATE = SYSDATE
        WHERE QUEUE_ID = #{queueId}
    </update>

    <!-- 큐 정리 (완료된 항목 삭제) -->
    <delete id="deleteCompletedQueue">
        DELETE FROM MAIL_QUEUE
        WHERE STATUS IN ('SUCCESS', 'FAILED')
          AND REG_DATE <![CDATA[<]]> SYSDATE - 7
    </delete>


    <!-- ==================== Consumer가 호출할 Detail 쿼리 (SQL_ID) ==================== -->

    <!-- 지연 주문 상세 조회 -->
    <select id="selectOverdueOrdersDetail" resultType="map">
        SELECT ORDER_ID      AS orderId,
               CUSTOMER_NAME AS customer,
               TO_CHAR(ORDER_DATE, 'YYYY-MM-DD') AS orderDate,
               DAYS_OVERDUE  AS daysOverdue
        FROM ORDERS
        WHERE STATUS = 'OVERDUE'
          AND DAYS_OVERDUE <![CDATA[>=]]> 5
        ORDER BY DAYS_OVERDUE DESC
    </select>

    <!-- 재고 부족 상세 조회 -->
    <select id="selectLowStockDetail" resultType="map">
        SELECT WAREHOUSE_CODE AS warehouseCode,
               PRODUCT_CODE   AS productCode,
               PRODUCT_NAME   AS productName,
               STOCK_QTY      AS currentStock,
               MIN_STOCK_QTY  AS minStock
        FROM INVENTORY
        WHERE STOCK_QTY <![CDATA[<]]> MIN_STOCK_QTY
        ORDER BY STOCK_QTY ASC
    </select>


    <!-- ==================== 사용자 조회 ==================== -->

    <!-- ADM 그룹 사용자 조회 -->
    <select id="selectAdmGroup" resultType="map">
        SELECT USER_ID   AS userId,
               USER_NAME AS userName,
               EMAIL     AS email,
               USER_GROUP AS userGroup
        FROM USER_INFO
        WHERE USER_GROUP = 'ADM'
          AND EMAIL IS NOT NULL
        ORDER BY USER_NAME
    </select>

    <!-- 특정 그룹 사용자 조회 -->
    <select id="selectUsersByGroup" parameterType="string" resultType="map">
        SELECT USER_ID   AS userId,
               USER_NAME AS userName,
               EMAIL     AS email,
               USER_GROUP AS userGroup
        FROM USER_INFO
        WHERE USER_GROUP = #{userGroup}
          AND EMAIL IS NOT NULL
        ORDER BY USER_NAME
    </select>

    <!-- 수신인 통합 조회 (사용자 ID + 그룹, DISTINCT로 중복 제거) -->
    <select id="selectRecipientsByConditions" parameterType="map" resultType="map">
        SELECT DISTINCT
               EMAIL       AS email,
               USER_ID     AS userId,
               USER_NAME   AS userName,
               USER_GROUP  AS userGroup
        FROM USER_INFO
        WHERE EMAIL IS NOT NULL
        <if test="userIds != null or groups != null">
          AND (
            <if test="userIds != null and userIds.size() > 0">
                USER_ID IN
                <foreach collection="userIds" item="userId" open="(" separator="," close=")">
                    #{userId}
                </foreach>
            </if>
            <if test="userIds != null and userIds.size() > 0 and groups != null and groups.size() > 0">
                OR
            </if>
            <if test="groups != null and groups.size() > 0">
                USER_GROUP IN
                <foreach collection="groups" item="group" open="(" separator="," close=")">
                    #{group}
                </foreach>
            </if>
          )
        </if>
        ORDER BY USER_NAME
    </select>

</mapper>
